{"version":3,"sources":["components/Buttons.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","sendNumber","num","props","btnNumber","Button","variant","onClick","this","React","Component","Calculator","handleNumber","data","val","rst","state","result","sign","setState","isFlag","toString","arrSign","clac","parseInt","value","num1","num2","rows","i","push","length","className","type","name","readOnly","ButtonGroup","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.65a42200.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass Buttons extends React.Component {\r\n    sendNumber = (num) => {\r\n        this.props.btnNumber(num);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button\r\n                    variant=\"secondary\"\r\n                    onClick={() => {\r\n                        this.sendNumber(this.props.num);\r\n                    }}\r\n                >\r\n                    <h4>{this.props.num}</h4>\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Buttons from './Buttons';\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: null,\r\n            result: '',\r\n            sign: '',\r\n            isFlag: false,\r\n            arrSign: ['+','-','*','/','C','=']\r\n        }\r\n    }\r\n\r\n    // callback from Buttons component\r\n    handleNumber = (data) => {\r\n        let val = 0;\r\n        let rst = 0;\r\n\r\n        if(typeof data == 'number') {\r\n            // prevent to begin 0\r\n            if(this.state.result === 0 || (data === 0 && this.state.result === '')) return;\r\n\r\n            if(this.state.sign === '') {\r\n                this.setState({\r\n                    result: this.state.result + data\r\n                });\r\n            } else {\r\n                if(this.state.isFlag) {\r\n                    this.setState({\r\n                        result: this.state.result.toString() + data\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        result: data,\r\n                        isFlag: true\r\n                    });\r\n                }   \r\n            }\r\n        } else {\r\n            // button C\r\n            if(data === this.state.arrSign[4]) {\r\n                val = null;\r\n                rst = '';\r\n                data = '';\r\n            // button =\r\n            }else if(data === this.state.arrSign[5]) {\r\n                if(!this.state.isFlag) return;\r\n\r\n                val = null;\r\n                rst = this.clac(parseInt(this.state.value), parseInt(this.state.result), this.state.sign);\r\n            // button +,-,*,/\r\n            } else {\r\n                if(!this.state.isFlag && this.state.sign !== '') return;\r\n\r\n                if(this.state.value == null) {\r\n                    val = this.state.result;\r\n                    rst = this.state.result;\r\n                } else {\r\n                    val = this.clac(parseInt(this.state.value), parseInt(this.state.result), this.state.sign);\r\n                    rst = this.clac(parseInt(this.state.value), parseInt(this.state.result), this.state.sign);\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                value: val,\r\n                result: rst,\r\n                sign: data,\r\n                isFlag: false\r\n            });\r\n        }\r\n    }\r\n\r\n    // calculate between num1 and num2\r\n    clac = (num1, num2, sign) => {\r\n        if(sign === this.state.arrSign[0]) {\r\n            return num1 + num2;\r\n        } else if(sign === this.state.arrSign[1]) {\r\n            return num1 - num2;\r\n        } else if(sign === this.state.arrSign[2]) {\r\n            return num1 * num2;\r\n        } else if(sign === this.state.arrSign[3]) {\r\n            return num1 / num2;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < 10; i++) {\r\n          rows.push(<Buttons num={i} btnNumber = {this.handleNumber} />);\r\n        }\r\n\r\n        for(let i = 0; i < this.state.arrSign.length; i++) {\r\n            rows.push(<Buttons num={this.state.arrSign[i]} btnNumber = {this.handleNumber} />);\r\n        }\r\n\r\n        return (\r\n            <div className=\"Main\">\r\n                <div>\r\n                    <input type=\"text\" name=\"input_number\" value={this.state.result} readOnly />\r\n                </div>\r\n                <div>\r\n                    <ButtonGroup aria-label=\"First group\">\r\n                        {rows[7]}{rows[8]}{rows[9]}{rows[10]}\r\n                    </ButtonGroup>\r\n                </div>\r\n                <div>\r\n                    <ButtonGroup aria-label=\"Second group\">\r\n                        {rows[4]}{rows[5]}{rows[6]}{rows[11]}\r\n                    </ButtonGroup>\r\n                </div>\r\n                <div>\r\n                    <ButtonGroup aria-label=\"Third group\">\r\n                        {rows[1]}{rows[2]}{rows[3]}{rows[12]}\r\n                    </ButtonGroup>\r\n                </div>\r\n                <div>\r\n                    <ButtonGroup aria-label=\"Fourth group\">\r\n                        {rows[14]}{rows[0]}{rows[15]}{rows[13]}\r\n                    </ButtonGroup>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}